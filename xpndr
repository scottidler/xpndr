#!/usr/bin/env python3

import os
import re
import sys
sys.dont_write_bytecode = True

REAL_FILE = os.path.abspath(__file__)
REAL_NAME = os.path.basename(REAL_FILE)
REAL_PATH = os.path.dirname(REAL_FILE)
if os.path.islink(__file__):
    LINK_FILE = REAL_FILE; REAL_FILE = os.path.abspath(os.readlink(__file__))
    LINK_NAME = REAL_NAME; REAL_NAME = os.path.basename(REAL_FILE)
    LINK_PATH = REAL_PATH; REAL_PATH = os.path.dirname(REAL_FILE)

NAME, EXT = os.path.splitext(REAL_NAME)

from os.path import expanduser
from ruamel import yaml
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from leatherman.fuzzy import fuzzy

TECH = [
    'tor',
    'web',
]

def load(config):
    config = yaml.safe_load(open(config))
    urls = []
    for base, items in config['urls'].items():
        urls += [
            base + item
            for item
            in items
        ]
    config['urls'] = urls
    return config

def expand(tech, patterns, config):
    filename = expanduser(f'~/.config/{NAME}/.{tech}.yml')
    urls = load(filename)['urls']
    for url in fuzzy(urls).include(*patterns):
        print(url)

def main(args=None):
    parser = ArgumentParser(
        description=__doc__,
        formatter_class=RawDescriptionHelpFormatter,
        add_help=False)
    parser.add_argument(
        '-C', '--config',
        metavar='FILEPATH',
        type=expanduser,
        default='~/.config/%(NAME)s/%(NAME)s.yml' % globals(),
        help='default="%(default)s"; config filepath')
    ns, rem = parser.parse_known_args(args)
    try:
        config = yaml.safe_load(open(ns.config)) or dict()
    except FileNotFoundError as er:
        config = dict()
    parser = ArgumentParser(
        parents=[parser])
    parser.set_defaults(**config)
    parser.add_argument(
        '-t', '--tech',
        default=TECH[0],
        help='default="%(default)s"; browser path')
    parser.add_argument(
        'patterns',
        metavar='PTNS',
        nargs='*',
        default=['*'],
        help=f'default=%(default)s; list of patterns to match against urls')
    ns = parser.parse_args(rem)
    expand(**ns.__dict__)

if __name__ == '__main__':
    main(sys.argv[1:])

